#!/bin/bash

set -e

url-installer() {
    echo "https://raw.githubusercontent.com/cl4irv0yant/dotfiles/cleanup/arch-install"
}

pacman -Syu dialog --noconfirm

timedatectl set-ntp true

comp="arch"

uefi=0
ls /sys/firmware/efi/efivars 2> /dev/null && uefi=1

devices_list=($(lsblk -d | awk '{print "/dev/" $1 " " $4 " on"}' \
    | grep -E 'sd|hd|vd|nvme|mmcblk'))

dialog --title "Choose hard drive" --no-cancel --radiolist \
"Select with SPACE, continue with ENTER \n\n" \
15 60 4 "${devices_list[@]}" 2> hd

default_size="8"
dialog --no-cancel --inputbox \
"You need four partitions: Boot, Root and Swap \n\
The boot partition will be 512M \n\
The root partition will be the remaining of the hard disk \n\n\
Enter below the partition size (in Gb) for the Swap. \n\n\
If you don't enter anything, it will default to ${default_size}G. \n" \
20 60 2> swap_size

size=$(cat swap_size) && rm swap_size

[[ $size =~ ^[0-9]+$ ]] || size=$default_size

hd=$(cat hd)

boot_partition_type=1
[[ "$uefi" == 0 ]] && boot_partition_type=4

#g - create non empty GPT partition table
#n - create new partition
#p - primary partition
#e - extended partition
#w - write the table to disk and exit

partprobe "$hd"

if [ "$uefi" -eq 1 ]; then
    fdisk "$hd" << EOF
g
n


+512M
t
1
n


+${size}G
n



w
EOF
else
    fdisk "$hd" << EOF
o
n
p


+${size}G
n
p



w
EOF
fi

partprobe "$hd"

echo "$hd" | grep -E 'nvme' &> /dev/null && hd="${hd}p"

passphrase=""
verify_passphrase=""

while true; do
  echo -n "Enter your disk encryption passphrase: "
  read -s passphrase
  echo

  echo -n "Type passphrase again to verify: "
  read -s verify_passphrase
  echo

  if [ "$passphrase" == "$verify_passphrase" ]; then
    break
  else
    echo "Passphrases do not match. Please try again."
  fi
done

cryptsetup luksFormat --type=luks1 "${hd}3" <<< "$passphrase"
cryptsetup open "${hd}3" root  <<< "$passphrase"

mkfs.ext4 /dev/mapper/root
mount /dev/mapper/root /mnt

mkswap "${hd}"

if [ "$uefi" = 1 ]; then
    mkfs.fat -F32 "${hd}1"
    mount --mkdir "${hd}1" /mnt/boot
fi

pacstrap -K /mnt base base-devel linux linux-firmware
genfstab -U /mnt >> /mnt/etc/fstab

echo "$uefi" > /mnt/var_uefi
echo "$hd" > /mnt/var_hd
echo "$comp" > /mnt/comp
url-installer > /mnt/var_url_installer
installer_url=$(cat /mnt/var_url_installer)

curl "$installer_url/install_chroot.sh" > /mnt/install_chroot.sh

arch-chroot /mnt bash install_chroot.sh

echo "Installation done"

umount -R /mnt
reboot
